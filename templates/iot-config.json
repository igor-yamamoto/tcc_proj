{
    "id" : "5a4354810e8e3d000797151e",
    "modified" : 1631458584,
    "name" : "iot-session",
    "dataDefinition" : {
      "id" : "5a4354470e8e3d000797151e",
      "modified" : 1631458528,
      "name" : "iot-dd",
      "schema" : {
        "metadata" : {
          "type" : "json"
        },
        "type" : "object",
        "properties" : {
          "greetings" : {
            "type" : "string",
            "metadata" : {
              "position" : "greetings",
              "name" : "greetings property",
              "description" : ""
            }
          },
          "counter" : {
            "type" : "number",
            "metadata" : {
              "type" : "integer",
              "position" : "counter",
              "name" : "counter property",
              "description" : ""
            }
          },
          "timestamp" : {
            "type" : "number",
            "metadata" : {
              "format" : "milliseconds",
              "position" : "timestamp",
              "name" : "timestamp property",
              "description" : "",
              "type" : "timestamp"
            }
          }
        },
        "schemaKey" : "http://json-schema.org/draft-04/schema#"
      }
    },
    "timer" : {
      "type" : "interval",
      "metric" : "seconds",
      "value" : 1
    },
    "ticksNumber" : 0,
    "isReplayLooped" : false,
    "devices" : [ {
      "id" : "613e0b8a1f4b950001dd5b5b",
      "modified" : 1631458528,
      "name" : "test-device",
      "properties" : [ {
        "name" : "device-name",
        "value" : "device"
      } ]
    } ],
    "deviceInjector" : {
      "rule" : "round_robin"
    },
    "generator" : {
      "type" : "schema_based",
      "schema" : {
        "metadata" : {
          "type" : "json"
        },
        "type" : "object",
        "properties" : {
          "greetings" : {
            "type" : "string",
            "metadata" : {
              "position" : "greetings",
              "name" : "greetings property",
              "description" : ""
            },
            "rule" : {
              "type" : "literal_string",
              "value" : "Hello there !!!"
            }
          },
          "counter" : {
            "type" : "number",
            "metadata" : {
              "type" : "integer",
              "position" : "counter",
              "name" : "counter property",
              "description" : ""
            },
            "rule" : {
              "type" : "custom_function",
              "function" : "\n/**\n * \n * Please, note the following information:\n * - to print information to docker console use \"print\" (console.log is not available)\n * - \"momentjs\" and \"lodash\" libraries are supported and available in global scope\n * \n * @param  {object} ruleState may be used to store information between iterations\n * @param  {object} sessionState may be used to store information between rules\n * @param  {string} deviceName device name\n * @return {integer} value that will be populated to specified property\n */\nfunction custom(ruleState, sessionState, deviceName) { \n    \n    if (!ruleState.counter) {\n        ruleState.counter = 1;\n    }\n    \n    return ruleState.counter++;\n}\n"
            }
          },
          "timestamp" : {
            "type" : "number",
            "metadata" : {
              "format" : "milliseconds",
              "position" : "timestamp",
              "name" : "timestamp property",
              "description" : "",
              "type" : "timestamp"
            },
            "rule" : {
              "type" : "current_time",
              "metric" : "milliseconds",
              "shift" : 0
            }
          }
        },
        "schemaKey" : "http://json-schema.org/draft-04/schema#"
      }
    },
    "targetSystem" : {
      "id" : "613e14d7c9c0f505d1b1be55",
      "modified" : 1631458571,
      "name" : "kafka-broker",
      "type" : "kafka_broker",
      "url" : "broker:29092",
      "topic" : "test-topic",
      "keyFunction" : "\n/**\n * Generates kafka key (UUID v4 string by default).\n * \n * @param {Object} payload Kafka message\n * @param {String} topic Kafka topic name\n * @return {String} \n */\nfunction generateKey(payload, topic) { \n    var uuid = \"\";\n    var i;\n    var random;\n    \n    for (i = 0; i < 32; i++) {\n        random = Math.random() * 16 | 0;\n        if (i == 8 || i == 12 || i == 16 || i == 20) {\n            uuid += \"-\"\n        }\n        uuid += (i == 12 ? 4 : (i == 16 ? (random & 3 | 8) : random)).toString(16);\n    }\n    \n    return uuid;\n}\n"
    },
    "replayLooped" : false
  }